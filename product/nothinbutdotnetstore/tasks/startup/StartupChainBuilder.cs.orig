using System;
using System.Collections.Generic;
using System.Threading;
using nothinbutdotnetstore.infrastructure.extensions;

namespace nothinbutdotnetstore.tasks.startup
{
    public class StartupChainBuilder
    {
        StartupCommandFactory startup_command_factory;
<<<<<<< HEAD
=======
        StartupCommand startup_command;
>>>>>>> 0affe3e22bee0be9a8c43aaec89514eb33611303

        public StartupChainBuilder(StartupCommandFactory startup_command_factory, Type first_command_type)
        {
            this.startup_command_factory = startup_command_factory;
<<<<<<< HEAD
            append_command(first_command_type);
=======
            startup_command = create_command_from(first_command_type);
>>>>>>> 0affe3e22bee0be9a8c43aaec89514eb33611303
        }

        StartupCommand create_command_from(Type first_command_type)
        {
<<<<<<< HEAD
            append_command<Command>();
=======
            return startup_command_factory.create_command_from(first_command_type);
>>>>>>> 0affe3e22bee0be9a8c43aaec89514eb33611303
        }

        private StartupChainBuilder(StartupCommandFactory startup_command_factory, StartupCommand previous_command, Type command_type)
        {
            this.startup_command_factory = startup_command_factory;
            startup_command = new ChainStartupCommand(previous_command, create_command_from(command_type));
        }

        public void finish_by<Command>() where Command : StartupCommand
        {
<<<<<<< HEAD
            var command = startup_command_factory.create_command_from(command_type);
            ThreadPool.QueueUserWorkItem(startup_command_queue_callback, command);

        }

        private void startup_command_queue_callback(object state)
        {
            ((StartupCommand) state).run();
=======
            followed_by<Command>().startup_command.run();
>>>>>>> 0affe3e22bee0be9a8c43aaec89514eb33611303
        }

        public StartupChainBuilder followed_by<Command>() where Command : StartupCommand
        {
            return new StartupChainBuilder(startup_command_factory, startup_command, typeof(Command));
        }
    }
}